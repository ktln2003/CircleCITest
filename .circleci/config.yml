version: 2
jobs:
  test:
    working_directory: ~/app
    docker:
      - image: docker:latest
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build image (test and build) 
          command: |
            docker build -t epic-gateway .
  publish:
    working_directory: ~/app
    docker:
      - image: docker:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "25:ed:84:84:a6:e2:e5:f8:fd:3b:c2:e1:21:27:26:32"
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache py-pip
            pip install awscli
      - run:
          name: Build image (test and build)
          command: |
            docker build --build-arg DOCKER_IMAGE_TAG=${CIRCLE_WORKFLOW_ID} -t ${IMAGE} .
      - run:
          name: Publish image to container service
          command: |
            [[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
            login="$(aws ecr get-login --no-include-email --region eu-central-1)"
            ${login}
            image=${IMAGE}:${CIRCLE_WORKFLOW_ID}
            docker tag ${IMAGE} "${CONTAINER_REGISTRY}/${image}"
            docker push "${CONTAINER_REGISTRY}/${image}"
  deploy-dev:
    machine:
      enabled: true
    working_directory: ~/app
    steps:
      - run:
          name: Deploy to dev environment
          command: |
            login="$(aws ecr get-login --no-include-email --region eu-central-1)"
            image_id=${IMAGE}_dev
            image=${IMAGE}:${CIRCLE_WORKFLOW_ID}
            ssh "${SWARM_MANAGER_USER}@${SWARM_MANAGER_HOST}" "${login}"
            ssh "${SWARM_MANAGER_USER}@${SWARM_MANAGER_HOST}" "docker pull ${CONTAINER_REGISTRY}/${image}; docker stop ${image_id}; docker rm ${image_id}; docker run -p 3000:8080 --name ${image_id} -d --restart always ${CONTAINER_REGISTRY}/${image}; exit"
  # deploy-test:
  #   machine:
  #     enabled: true
  #   working_directory: ~/app
  #   steps:
  #     - run:
  #         name: Deploy to test environment
  #         command: |
  #           login="$(aws ecr get-login --no-include-email --region eu-central-1)"
  #           image_id=${IMAGE}_test
  #           image=${IMAGE}:${CIRCLE_TAG}
  #           ssh "${VM_USER}@${VM_HOST}" "${login}"
  #           ssh "${VM_USER}@${VM_HOST}" "docker pull ${CONTAINER_REGISTRY}/${image}; docker stop ${image_id}; docker rm ${image_id}; docker run -p 3001:8080 --name ${image_id} -d --restart always ${CONTAINER_REGISTRY}/${image}; exit"
  # deploy-stage:
  #   machine:
  #     enabled: true
  #   working_directory: ~/app
  #   steps:
  #     - run:
  #         name: Deploy to stage environment
  #         command: |
  #           login="$(aws ecr get-login --no-include-email --region eu-central-1)"
  #           image_id=${IMAGE}_stage
  #           image=${IMAGE}:${CIRCLE_TAG}
  #           ssh "${VM_USER}@${VM_HOST}" "${login}"
  #           ssh "${VM_USER}@${VM_HOST}" "docker pull ${CONTAINER_REGISTRY}/${image}; docker stop ${image_id}; docker rm ${image_id}; docker run -p 3002:8080 --name ${image_id} -d --restart always ${CONTAINER_REGISTRY}/${image}; exit"
workflows:
  version: 2
  test:
    jobs:
      - test
      - publish:
          requires:
            - test
      - deploy-dev:
          requires:
            - publish